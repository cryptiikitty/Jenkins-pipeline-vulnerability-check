def ipList = ["127.0.0.1", "10.10.10.10"] // set list of ip
def win_ipList=[]
def unix_ipList=[]
def dangerIp = ["192.168.1.1", "127.0.0.1"]

pipeline {
    agent any
    environment {
        // set param for GVM scan
        time = '11:50'
        day = "2024-3-19"
        name = 'Scan_name'
        ip = ''
        lin_report = ''
   }
    stages {
        stage('Check danger IP') {
            steps {
                script {
                    echo "All IP: ${ipList}"
                    for (ip in dangerIp) {
                        if (ipList.contains(ip)) {
                            echo "Danger IP: ${ip}"
                            ipList.remove(ip)
                        }
                    }

                }
            }
        }
        stage('Nmap/httpx') {
            steps {
                script {
                    def ipList_lin=[]
                    def ipList_windows=[]
                    for (ip in ipList) {
                        def scanResult = sh(script: "nmap -Pn -p- ${ip}", returnStdout: true).trim()
                        echo scanResult
                        def openPorts = parseOpenPorts(scanResult)

                        def sshOpen = openPorts.contains(22)
                        def rdpOpen = openPorts.contains(3389)
                        def openPortsCount = openPorts.size()
                        if (openPortsCount <= 1) {
                            echo "IP ${ip} - Обнаружен firewall либо сетевой доступ отсутствует"
                        } else if (sshOpen) {
                            echo "IP ${ip} - There is access, the ports are open. Linux Host"
                            ipList_lin.add(ip)
                        } else if (rdpOpen){
                            echo "IP ${ip} - There is access, the ports are open. Windows Host"
                            ipList_windows.add(ip)
                        } else {
                            echo "IP ${ip} - RDP or SSH is closed. Check iptables/firewall"
                        }
                        ports = openPorts.join(',')
                        sh "httpx -target '${ip}' -p '${ports}' -silent >> /var/jenkins_home/workspace/Pipeline_name/BurpSuite_target"
                    }
                    echo "Unix hosts: ${ipList_lin}"
                    echo "Windows hosts: ${ipList_windows}"
                    def len_list = ipList.size()
                    def len_unix = ipList_lin.size()
                    def len_win = ipList_windows.size()
                    if (len_list == len_unix + len_win) {
                        if (!ipList_windows.isEmpty()){
                            win_ipList = ipList_windows
                        }
                        if (!ipList_lin.isEmpty()){
                            unix_ipList = ipList_lin
                        }
                    } else {
                        error('no network access')
                    }
                }
            }
        }
        stage('Account access check') {
            steps {
                script {
                    if (!unix_ipList.isEmpty()) {
                        for (ip in unix_ipList) {
                                withVault(configuration: [disableChildPoliciesOverride: false, timeout: 60, vaultCredentialId: '<id>', vaultUrl: 'http://<ip>:<port>'], vaultSecrets: [[path: 'storage/ssh_key', secretValues: [[envVar: 'identity', vaultKey: 'key']]], [path: 'storage/sshKey_passph', secretValues: [[envVar: 'passphrase', vaultKey: 'passph']]]]) {
                                def remote = [:]
                                remote.name = 'hostname'
                                remote.host = ip
                                remote.user = 'username'
                                remote.identity = env.identity
                                remote.passphrase = env.passphrase
                                remote.allowAnyHosts = true
                                
                                name_report = '/var/jenkins_home/workspace/Pipeline_name/linpeas_report_' + ip
                                echo name_report
                                
                                stage('Linpeas scan') {
                                    withEnv(["ip=${ip}"]) {
                                        
                                        sshPut remote: remote, from: '/linpeas.sh', into: '/home/username/linpeas.sh'
                                        sshCommand remote: remote, command: "chmod +x /home/username/linpeas.sh"
                                        sshCommand remote: remote, command: "/home/username/linpeas.sh -q -o system_information,container,cloud,procs_crons_timers_srvcs_sockets,network_information,users_information,software_information,api_keys_regex > /home/username/linpeas_report.txt 2> err.txt"
                                        sshGet remote: remote, from: '/home/username/linpeas_report.txt', into: name_report, override: true
                                        sshRemove remote: remote, path: '/home/username/linpeas.sh'
                                        sshRemove remote: remote, path: '/home/username/linpeas_report.txt'
                                        sshRemove remote: remote, path: '/home/username/err.txt'
                                        echo "------------------------------------- ${ip} ---------------------------------------------"
                                        ansiColor('xterm256') {
                                            sh 'cat /var/jenkins_home/workspace/Pipeline_name/linpeas_report_${ip}'
                                        }
                                        echo "------------------------------------- ${ip} ---------------------------------------------"
                                        }
                                }
                            }
                        }
                    }

                }
            }
        }
        stage('GVM scan') {
            steps {
                script {
                    ipgvm = ipList.join(',')
                    withEnv(["ip=${ipgvm}"]) {
                        //sh 'python3 pyGVM.py --hosts "${ip}" --time "${time}" --day "${day}" --name "${name}"'
                    }
                }
            }
        }
        
        stage('Burp Suite scan') {
            steps {
                script {
                    sh 'cat /var/jenkins_home/workspace/Pipeline_name/BurpSuite_target'
                    sh 'python3 burpAPI.py -u http://<ip>:1337/<API key>/v0.1/scan -f /var/jenkins_home/workspace/Pipeline_name/BurpSuite_target'
                    sh 'rm -f /var/jenkins_home/workspace/Pipeline_name/BurpSuite_target'
                }
            }
        }
    }
}

// Parse nmap output
def parseOpenPorts(scanResult) {
    def openPorts = []
    def lines = scanResult.readLines()
    def startParsing = false

    for (line in lines) {
        if (line.startsWith("PORT")) {
            startParsing = true
        } else if (startParsing) {
            def port = line.split("/")[0].trim()
            if (port.isNumber()) {
                openPorts.add(port.toInteger())
            }
        }
    }
    return openPorts
}
